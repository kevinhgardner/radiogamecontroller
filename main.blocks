<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Ent6#F))z#zb*sgiaN!j" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="+[hTR5BS1=+g2(;g?%g?" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace RadioGameController {" line1="" line2="    let isController = false;" line3="    let enabled = false;" line4="    let handlers: Action[][] = [[]];" line5="" line6="    export enum RadioGameControllerButtons {" line7="        //% block=&quot;Joypad Up&quot;" line8="        Up = Kitronik_Game_Controller.ControllerButtonPins.Up," line9="        //% block=&quot;Joypad Down&quot;" line10="        Down = Kitronik_Game_Controller.ControllerButtonPins.Down," line11="        //% block=&quot;Joypad Left&quot;" line12="        Left = Kitronik_Game_Controller.ControllerButtonPins.Left," line13="        //% block=&quot;Joypad Right&quot;" line14="        Right = Kitronik_Game_Controller.ControllerButtonPins.Right," line15="        //% block=&quot;Joypad Fire1&quot;" line16="        Fire1 = Kitronik_Game_Controller.ControllerButtonPins.Fire1," line17="        //% block=&quot;Joypad Fire2&quot;" line18="        Fire2 = Kitronik_Game_Controller.ControllerButtonPins.Fire2," line19="        //% block=&quot;Joypad Fire2&quot;" line20="        ButtonA = DAL.MICROBIT_ID_BUTTON_A," line21="        //% block=&quot;Joypad Fire2&quot;" line22="        ButtonB = DAL.MICROBIT_ID_BUTTON_B," line23="    }" line24="" line25="    export enum RadioGameControllerButtonEvents {" line26="        //% block=&quot;up&quot;" line27="        Up = Kitronik_Game_Controller.ControllerButtonEvents.Up," line28="        //% block=&quot;down&quot;" line29="        Down = Kitronik_Game_Controller.ControllerButtonEvents.Down," line30="        //% block=&quot;click&quot;" line31="        Click = Kitronik_Game_Controller.ControllerButtonEvents.Click," line32="    }" line33="" line34="    //% block" line35="    export function enable(radioId: number) {" line36="        if (!enabled) {" line37="            init(radioId)" line38="        }" line39="    }" line40="" line41="    //% block" line42="    export function onButtonPress(button: RadioGameControllerButtons, event: RadioGameControllerButtonEvents, handler: Action) {" line43="        if (!handlers[button]) {" line44="            handlers[button] = [];" line45="        }" line46="        handlers[button][event] = handler;" line47="    }" line48="" line49="    function init(radioId: number) {" line50="        enabled = true;" line51="        radio.setGroup(radioId)" line52="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Up, Kitronik_Game_Controller.ControllerButtonEvents.Up, function () {" line53="            doAction(RadioGameControllerButtons.Up, RadioGameControllerButtonEvents.Up)" line54="        })" line55="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Up, Kitronik_Game_Controller.ControllerButtonEvents.Down, function () {" line56="            doAction(RadioGameControllerButtons.Up, RadioGameControllerButtonEvents.Down)" line57="        })" line58="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Up, Kitronik_Game_Controller.ControllerButtonEvents.Click, function () {" line59="            doAction(RadioGameControllerButtons.Up, RadioGameControllerButtonEvents.Click)" line60="        })" line61="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Down, Kitronik_Game_Controller.ControllerButtonEvents.Up, function () {" line62="            doAction(RadioGameControllerButtons.Down, RadioGameControllerButtonEvents.Up)" line63="        })" line64="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Down, Kitronik_Game_Controller.ControllerButtonEvents.Down, function () {" line65="            doAction(RadioGameControllerButtons.Down, RadioGameControllerButtonEvents.Down)" line66="        })" line67="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Down, Kitronik_Game_Controller.ControllerButtonEvents.Click, function () {" line68="            doAction(RadioGameControllerButtons.Down, RadioGameControllerButtonEvents.Click)" line69="        })" line70="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Right, Kitronik_Game_Controller.ControllerButtonEvents.Up, function () {" line71="            doAction(RadioGameControllerButtons.Right, RadioGameControllerButtonEvents.Up)" line72="        })" line73="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Right, Kitronik_Game_Controller.ControllerButtonEvents.Down, function () {" line74="            doAction(RadioGameControllerButtons.Right, RadioGameControllerButtonEvents.Down)" line75="        })" line76="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Right, Kitronik_Game_Controller.ControllerButtonEvents.Click, function () {" line77="            doAction(RadioGameControllerButtons.Right, RadioGameControllerButtonEvents.Click)" line78="        })" line79="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Left, Kitronik_Game_Controller.ControllerButtonEvents.Up, function () {" line80="            doAction(RadioGameControllerButtons.Left, RadioGameControllerButtonEvents.Up)" line81="        })" line82="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Left, Kitronik_Game_Controller.ControllerButtonEvents.Down, function () {" line83="            doAction(RadioGameControllerButtons.Left, RadioGameControllerButtonEvents.Down)" line84="        })" line85="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Left, Kitronik_Game_Controller.ControllerButtonEvents.Click, function () {" line86="            doAction(RadioGameControllerButtons.Left, RadioGameControllerButtonEvents.Click)" line87="        })" line88="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Fire1, Kitronik_Game_Controller.ControllerButtonEvents.Up, function () {" line89="            doAction(RadioGameControllerButtons.Fire1, RadioGameControllerButtonEvents.Up)" line90="        })" line91="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Fire1, Kitronik_Game_Controller.ControllerButtonEvents.Down, function () {" line92="            doAction(RadioGameControllerButtons.Fire1, RadioGameControllerButtonEvents.Down)" line93="        })" line94="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Fire1, Kitronik_Game_Controller.ControllerButtonEvents.Click, function () {" line95="            doAction(RadioGameControllerButtons.Fire1, RadioGameControllerButtonEvents.Click)" line96="        })" line97="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Fire2, Kitronik_Game_Controller.ControllerButtonEvents.Up, function () {" line98="            doAction(RadioGameControllerButtons.Fire2, RadioGameControllerButtonEvents.Up)" line99="        })" line100="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Fire2, Kitronik_Game_Controller.ControllerButtonEvents.Down, function () {" line101="            doAction(RadioGameControllerButtons.Fire2, RadioGameControllerButtonEvents.Down)" line102="        })" line103="        Kitronik_Game_Controller.onButtonPress(Kitronik_Game_Controller.ControllerButtonPins.Fire2, Kitronik_Game_Controller.ControllerButtonEvents.Click, function () {" line104="            doAction(RadioGameControllerButtons.Fire2, RadioGameControllerButtonEvents.Click)" line105="        })" line106="    }" line107="" line108="    function doAction(button: RadioGameControllerButtons, event: RadioGameControllerButtonEvents) {" line109="        doSendButtonState(button, event)" line110="        if (handlers[button] &amp;&amp; handlers[button][event]) {" line111="            handlers[button][event]()" line112="        }" line113="    }" line114="" line115="    function doSendButtonState(button: RadioGameControllerButtons, event: RadioGameControllerButtonEvents) {" line116="        radio.sendValue(&quot;rgc_&quot; + button, event)" line117="    }" line118="" line119="    radio.onReceivedValue(function (name, value) {" line120="        if (enabled) {" line121="            let splitted = name.split(&quot;_&quot;)" line122="            if (splitted[0].compare(&quot;rgc_&quot;)) {" line123="                let b = parseInt(splitted[1])" line124="                if (handlers[b] &amp;&amp; handlers[b][value]) {" line125="                    handlers[b][value]()" line126="                }" line127="            }" line128="        }" line129="    })" line130="" line131="" line132="}" numlines="133"></mutation></block></statement></block><block type="basic_show_icon" id="TN`psF@b@wCdhAC@HmOG" disabled="true" x="1728" y="354"><field name="i">IconNames.Heart</field></block><block type="control_raise_event" id="0-tY|FK`XRHG)zI/U?V?" disabled="true" x="1887" y="563"><value name="src"><shadow type="control_event_source_id" id="-.u8~bpWm9z*XOEz)3p=" disabled="true"><field name="id">EventBusSource.MICROBIT_ID_BUTTON_A</field></shadow></value><value name="value"><shadow type="control_event_value_id" id="AV2:w0@eA8m|cI1*P~_$" disabled="true"><field name="id">EventBusValue.MICROBIT_EVT_ANY</field></shadow></value></block><block type="control_raise_event" id="lK?W3Hmdwtc6O?fo{t?e" disabled="true" x="1938" y="788"><value name="src"><shadow type="control_event_source_id" id="V/E/.X:p0=p-g3Ezwmk:" disabled="true"><field name="id">EventBusSource.MICROBIT_ID_BUTTON_A</field></shadow></value><value name="value"><shadow type="control_event_value_id" id="5{_?E88eCPT.1;{`[HFp" disabled="true"><field name="id">EventBusValue.MICROBIT_EVT_ANY</field></shadow></value></block></xml>